import { CoWebsite } from "./Api/Iframe/nav";
import type { ButtonDescriptor } from "./Api/Iframe/Ui/ButtonDescriptor";
import type { Popup } from "./Api/Iframe/Ui/Popup";
import type { Sound } from "./Api/Iframe/Sound/Sound";
export type { UIWebsite } from "./Api/Iframe/Ui/UIWebsite";
export type { Menu } from "./Api/Iframe/Ui/Menu";
export type { ActionMessage } from "./Api/Iframe/Ui/ActionMessage";
export type { EmbeddedWebsite } from "./Api/Iframe/Room/EmbeddedWebsite";
export type { Area } from "./Api/Iframe/Area/Area";
export type { ActionsMenuAction } from "./Api/Iframe/ui";
declare const wa: {
    ui: import("./Api/Iframe/ui").WorkAdventureUiCommands;
    nav: import("./Api/Iframe/nav").WorkadventureNavigationCommands;
    controls: import("./Api/Iframe/controls").WorkadventureControlsCommands;
    chat: import("./Api/Iframe/chat").WorkadventureChatCommands;
    sound: import("./Api/Iframe/sound").WorkadventureSoundCommands;
    room: import("./Api/Iframe/room").WorkadventureRoomCommands;
    player: import("./Api/Iframe/player").WorkadventurePlayerCommands;
    players: import("./Api/Iframe/players").WorkadventurePlayersCommands;
    camera: import("./Api/Iframe/camera").WorkAdventureCameraCommands;
    state: import("./Api/Iframe/state").WorkadventureStateCommands & {
        [key: string]: unknown;
    };
    /**
     * When your script / iFrame loads WorkAdventure, it takes a few milliseconds for your
     * script / iFrame to exchange data with WorkAdventure. You should wait for the WorkAdventure
     * API to be fully ready using the WA.onInit() method.
     * {@link https://workadventu.re/map-building/api-start.md#waiting-for-workadventure-api-to-be-available | Website documentation}
     *
     * Some properties (like the current user name, or the room ID) are not available until WA.onInit has completed.
     *
     * @returns {void}
     */
    onInit(): Promise<void>;
    /**
     * The metadata sent by the administration website.
     * Important: You need to wait for the end of the initialization before accessing.
     * {@link https://workadventu.re/map-building/api-metadata.md | Website documentation}
     *
     * @returns {unknown|undefined} Metadata
     */
    readonly metadata: unknown;
    /**
     * @deprecated Use WA.chat.sendChatMessage instead
     */
    sendChatMessage(message: string, author: string): void;
    /**
     * @deprecated Use WA.chat.disablePlayerControls instead
     */
    disablePlayerControls(): void;
    /**
     * @deprecated Use WA.controls.restorePlayerControls instead
     */
    restorePlayerControls(): void;
    /**
     * @deprecated Use WA.ui.displayBubble instead
     */
    displayBubble(): void;
    /**
     * @deprecated Use WA.ui.removeBubble instead
     */
    removeBubble(): void;
    /**
     * @deprecated Use WA.nav.openTab instead
     */
    openTab(url: string): void;
    /**
     * @deprecated Use WA.sound.loadSound instead
     */
    loadSound(url: string): Sound;
    /**
     * @deprecated Use WA.nav.goToPage instead
     */
    goToPage(url: string): void;
    /**
     * @deprecated Use WA.nav.goToRoom instead
     */
    goToRoom(url: string): void;
    /**
     * @deprecated Use WA.nav.openCoWebSite instead
     */
    openCoWebSite(url: string, allowApi?: boolean, allowPolicy?: string): Promise<CoWebsite>;
    /**
     * @deprecated Use WA.nav.closeCoWebSite instead
     */
    closeCoWebSite(): Promise<void>;
    /**
     * @deprecated Use WA.ui.openPopup instead
     */
    openPopup(targetObject: string, message: string, buttons: ButtonDescriptor[]): Popup;
    /**
     * @deprecated Use WA.chat.onChatMessage instead
     */
    onChatMessage(callback: (message: string) => void): void;
    /**
     * @deprecated Use WA.room.onEnterZone instead
     */
    onEnterZone(name: string, callback: () => void): void;
    /**
     * @deprecated Use WA.room.onLeaveZone instead
     */
    onLeaveZone(name: string, callback: () => void): void;
};
export declare type WorkAdventureApi = typeof wa;
export type { Sound, Popup, ButtonDescriptor, CoWebsite };
declare global {
    interface Window {
        WA: WorkAdventureApi;
    }
    let WA: WorkAdventureApi;
}
