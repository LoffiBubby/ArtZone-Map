import { IframeApiContribution } from "./IframeApiContribution";
export declare class CoWebsite {
    private readonly id;
    constructor(id: string);
    close(): Promise<void>;
}
export declare class WorkadventureNavigationCommands extends IframeApiContribution<WorkadventureNavigationCommands> {
    callbacks: never[];
    /**
     * Opens the webpage at "url" in your browser, in a new tab.
     * {@link https://workadventu.re/map-building/api-nav.md#opening-a-web-page-in-a-new-tab | Website documentation}
     *
     * @param {string} url Url of the web page
     */
    openTab(url: string): void;
    /**
     * Opens the webpage at "url" in your browser in place of WorkAdventure. WorkAdventure will be completely unloaded.
     * {@link https://workadventu.re/map-building/api-nav.md#opening-a-web-page-in-the-current-tab | Website documentation}
     *
     * @param {string} url Url of the web page
     */
    goToPage(url: string): void;
    /**
     * Load the map at url without unloading workadventure.
     * relative urls: "../subFolder/map.json[#start-layer-name]" global urls: "/_/global/domain/path/map.json[#start-layer-name]"
     * {@link https://workadventu.re/map-building/api-nav.md#going-to-a-different-map-from-the-script | Website documentation}
     *
     * @param {string} url Url of the web page
     */
    goToRoom(url: string): void;
    /**
     * Opens the webpage at "url" in an iFrame (on the right side of the screen) or close that iFrame.
     * {@link https://workadventu.re/map-building/api-nav.md#openingclosing-web-page-in-co-websites | Website documentation}
     *
     * @param {string} url Url of the web page
     * @param {boolean|undefined} allowApi  Allows the webpage to use the "IFrame API" and execute script (it is equivalent to putting the openWebsiteAllowApi property in the map)
     * @param {string|undefined} allowPolicy Grants additional access rights to the iFrame
     * @param {number|undefined} widthPercent Define the width of the main cowebsite beetween the min size and the max size (70% of the viewport)
     * @param {number|undefined} position Define in whitch slot the web page will be open
     * @param {boolean|undefined} closable Allow to close the webpage also you need to close it by the api
     * @param {boolean|undefined} lazy Add the cowebsite but don't load it
     * @returns {CoWebsite} The CoWebsite created
     */
    openCoWebSite(url: string, allowApi?: boolean, allowPolicy?: string, widthPercent?: number, position?: number, closable?: boolean, lazy?: boolean): Promise<CoWebsite>;
    /**
     * Get all opened co-websites with their ids and positions.
     * {@link https://workadventu.re/map-building/api-nav.md#get-all-co-websites | Website documentation}
     *
     * @returns {CoWebsite[]} All Cowebsites
     */
    getCoWebSites(): Promise<CoWebsite[]>;
    /**
     * @deprecated Use closeCoWebsites instead to close all co-websites
     */
    closeCoWebSite(): Promise<void>;
}
declare const _default: WorkadventureNavigationCommands;
export default _default;
