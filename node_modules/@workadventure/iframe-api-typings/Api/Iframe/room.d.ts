import { Observable } from "rxjs";
import { IframeApiContribution } from "./IframeApiContribution";
import type { WorkadventureRoomWebsiteCommands } from "./website";
import { WorkadventureAreaCommands } from "./area";
import { ITiledMap } from "@workadventure/tiled-map-type-guard";
interface TileDescriptor {
    x: number;
    y: number;
    tile: number | string | null;
    layer: string;
}
export declare const setRoomId: (id: string) => void;
export declare const setMapURL: (url: string) => void;
export declare class WorkadventureRoomCommands extends IframeApiContribution<WorkadventureRoomCommands> {
    callbacks: ({
        type: "enterEvent";
        callback: (event: {
            name: string;
        }) => void;
    } | {
        type: "leaveEvent";
        callback: (event: {
            name: string;
        }) => void;
    } | {
        type: "enterLayerEvent";
        callback: (event: {
            name: string;
        }) => void;
    } | {
        type: "leaveLayerEvent";
        callback: (event: {
            name: string;
        }) => void;
    })[];
    /**
     * @deprecated Use onEnterLayer instead
     */
    onEnterZone(name: string, callback: () => void): void;
    /**
     * @deprecated Use onLeaveLayer instead
     */
    onLeaveZone(name: string, callback: () => void): void;
    /**
     * Listens to the position of the current user. The event is triggered when the user enters a given layer.
     * {@link https://workadventu.re/map-building/api-room.md#detecting-when-the-user-entersleaves-a-layer | Website documentation}
     *
     * @param {string} layerName Name of the layer who as defined in Tiled
     * @returns {Subject<void>} Event subject can be listen by a subscribtion
     */
    onEnterLayer(layerName: string): Observable<void>;
    /**
     * Listens to the position of the current user. The event is triggered when the user leaves a given layer.
     * {@link https://workadventu.re/map-building/api-room.md#detecting-when-the-user-entersleaves-a-layer | Website documentation}
     *
     * @param {string} layerName Name of the layer who as defined in Tiled
     * @returns {Subject<void>} Event subject can be listen by a subscribtion
     */
    onLeaveLayer(layerName: string): Observable<void>;
    /**
     * This methods can be used to show a layer. if layerName is the name of a group layer, show all the layer in that group layer.
     * {@link https://workadventu.re/map-building/api-room.md#show--hide-a-layer | Website documentation}
     *
     * @param {string} layerName Name of the layer/group layer who as defined in Tiled
     */
    showLayer(layerName: string): void;
    /**
     * This methods can be used to hide a layer. if layerName is the name of a group layer, hide all the layer in that group layer.
     * {@link https://workadventu.re/map-building/api-room.md#show--hide-a-layer | Website documentation}
     *
     * @param {string} layerName Name of the layer/group layer who as defined in Tiled
     */
    hideLayer(layerName: string): void;
    /**
     * Set the value of the propertyName property of the layer layerName at propertyValue.
     * If the property doesn't exist, create the property propertyName and set the value of the property at propertyValue.
     * Note : To unset a property from a layer, use setProperty with propertyValue set to undefined.
     * {@link https://workadventu.re/map-building/api-room.md#setcreate-properties-in-a-layer | Website documentation}
     *
     * @param {string} layerName Name of the layer who as defined in Tiled
     * @param {string} propertyName Name of the property
     * @param {string|number|boolean|undefined} propertyValue Value of the property
     */
    setProperty(layerName: string, propertyName: string, propertyValue: string | number | boolean | undefined): void;
    /**
     * Returns a promise that resolves to the JSON map file.
     * Check the {@link https://doc.mapeditor.org/en/stable/reference/json-map-format/ | Tiled documentation to learn more about the format of the JSON map}.
     * {@link https://workadventu.re/map-building/api-room.md#getting-map-data | Website documentation}
     *
     * @returns {Promise<ITiledMap>} Map in Tiled JSON format
     */
    getTiledMap(): Promise<ITiledMap>;
    /**
     * Replace the tile at the x and y coordinates in the layer named layer by the tile with the id tile.
     * {@link https://workadventu.re/map-building/api-room.md#changing-tiles | Website documentation}
     *
     * @param {TileDescriptor[]} tiles Description of a tile
     */
    setTiles(tiles: TileDescriptor[]): void;
    /**
     * The ID of the current room is available from the WA.room.id property.
     * Important: You need to wait for the end of the initialization before accessing.
     * {@link https://workadventu.re/map-building/api-room.md#get-the-room-id | Website documentation}
     *
     * @returns {string} Id of the room
     */
    get id(): string;
    /**
     * The URL of the map is available from the WA.room.mapURL property.
     * Important: You need to wait for the end of the initialization before accessing.
     * {@link https://workadventu.re/map-building/api-room.md#get-the-map-url | Website documentation}
     *
     * @returns {string} Url of the map
     */
    get mapURL(): string;
    /**
     * Load a tileset in JSON format from an url and return the id of the first tile of the loaded tileset.
     * {@link https://workadventu.re/map-building/api-room.md#loading-a-tileset | Website documentation}
     *
     * @param {string} url Url of the tileset
     * @returns {Promise<number>} Promise to return the id of the tileset
     */
    loadTileset(url: string): Promise<number>;
    get website(): WorkadventureRoomWebsiteCommands;
    get area(): WorkadventureAreaCommands;
}
declare const _default: WorkadventureRoomCommands;
export default _default;
