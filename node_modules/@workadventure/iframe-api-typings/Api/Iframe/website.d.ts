import { IframeApiContribution } from "./IframeApiContribution";
import { EmbeddedWebsite } from "./Room/EmbeddedWebsite";
import type { CreateEmbeddedWebsiteEvent } from "../Events/EmbeddedWebsiteEvent";
export declare class WorkadventureRoomWebsiteCommands extends IframeApiContribution<WorkadventureRoomWebsiteCommands> {
    callbacks: never[];
    /**
     * You can get an instance of an embedded website by using the WA.room.website.get() method. It returns a promise of an EmbeddedWebsite instance.
     * {@link https://workadventu.re/map-building/api-room.md#getting-an-instance-of-a-website-already-embedded-in-the-map | Website documentation}
     *
     * @param {string} objectName Object name
     * @returns {Promise<EmbeddedWebsite>} Promise to get a embed website
     */
    get(objectName: string): Promise<EmbeddedWebsite>;
    /**
     * You can create an instance of an embedded website by using the WA.room.website.create() method. It returns an EmbeddedWebsite instance.
     * {@link https://workadventu.re/map-building/api-room.md#adding-a-new-website-in-a-map | Website documentation}
     *
     * @param createEmbeddedWebsiteEvent
     * @returns {EmbeddedWebsite} Created embed website
     */
    create(createEmbeddedWebsiteEvent: CreateEmbeddedWebsiteEvent): EmbeddedWebsite;
    /**
     * Use WA.room.website.delete to completely remove an embedded website from your map.
     * {@link https://workadventu.re/map-building/api-room.md#deleting-a-website-from-a-map | Website documentation}
     *
     * @param {string} objectName Object name
     * @returns {Promise<void>} Promise to away to known when the object has been deleted
     */
    delete(objectName: string): Promise<void>;
}
declare const _default: WorkadventureRoomWebsiteCommands;
export default _default;
