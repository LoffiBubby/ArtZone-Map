import { IframeApiContribution } from "./IframeApiContribution";
import type { HasPlayerMovedEventCallback } from "../Events/HasPlayerMovedEvent";
import { WorkadventureProximityMeetingCommands } from "./Player/ProximityMeeting";
export declare const setPlayerName: (name: string) => void;
export declare const setPlayerLanguage: (language: string | undefined) => void;
export declare const setTags: (_tags: string[]) => void;
export declare const setUserRoomToken: (token: string | undefined) => void;
export declare const setPlayerId: (_id: number | undefined) => void;
export declare const setUuid: (_uuid: string | undefined) => void;
export declare class WorkadventurePlayerCommands extends IframeApiContribution<WorkadventurePlayerCommands> {
    readonly state: import("./playerState").WorkadventurePlayerStateCommands & {
        [key: string]: unknown;
    };
    callbacks: {
        type: "hasPlayerMoved";
        callback: (event: {
            oldX?: number | undefined;
            oldY?: number | undefined;
            x: number;
            y: number;
            direction: "left" | "right" | "up" | "down";
            moving: boolean;
        }) => void;
    }[];
    /**
     * Get the player name.
     * Important: You need to wait for the end of the initialization before accessing.
     * {@link https://workadventu.re/map-building/api-player.md#get-the-player-name | Website documentation}
     *
     * @returns {string} Player name
     */
    get name(): string;
    /**
     * Get the player UUID.
     * Important: You need to wait for the end of the initialization before accessing.
     * {@link https://workadventu.re/map-building/api-player.md#get-the-player-uuid | Website documentation}
     * @deprecated Use WA.player.uuid instead
     *
     * @returns {string|undefined} Player UUID
     */
    get id(): string | undefined;
    /**
     * Get the player id.
     * Important: You need to wait for the end of the initialization before accessing.
     * {@link https://workadventu.re/map-building/api-player.md#get-the-player-id | Website documentation}
     *
     * @returns {number} Player id
     */
    get playerId(): number;
    /**
     * Get the player UUID.
     * Important: You need to wait for the end of the initialization before accessing.
     * {@link https://workadventu.re/map-building/api-player.md#get-the-player-uuid | Website documentation}
     *
     * @returns {string|undefined} Player UUID
     */
    get uuid(): string | undefined;
    /**
     * Get the player language.
     * Important: You need to wait for the end of the initialization before accessing.
     * {@link https://workadventu.re/map-building/api-player.md#get-the-player-language | Website documentation}
     *
     * @returns {string} Player language
     */
    get language(): string;
    /**
     * Get the player tags.
     * Important: You need to wait for the end of the initialization before accessing.
     * {@link https://workadventu.re/map-building/api-player.md#get-the-tags-of-the-player | Website documentation}
     *
     * @returns {string[]} Player tags
     */
    get tags(): string[];
    /**
     * Get the player position.
     * Important: You need to wait for the end of the initialization before accessing.
     * {@link https://workadventu.re/map-building/api-player.md#get-the-position-of-the-player | Website documentation}
     *
     * @returns {Position} Player position
     */
    getPosition(): Promise<Position>;
    /**
     * Listens to the movement of the current user and calls the callback.
     * Sends an event when the user stops moving, changes direction and every 200ms when moving in the same direction.
     * {@link https://workadventu.re/map-building/api-player.md#listen-to-player-movement | Website documentation}
     *
     * @param {HasPlayerMovedEventCallback} callback Function that will be called when the current player is moving. It contains the event
     */
    onPlayerMove(callback: HasPlayerMovedEventCallback): void;
    /**
     * Player will try to find shortest path to the destination point and proceed to move there.
     * {@link https://workadventu.re/map-building/api-player.md#move-player-to-position | Website documentation}
     *
     * @param {number} x Horizontal position
     * @param {number} y Vertical position
     * @param {number} speed Speed
     * @returns {Promise<{ x: number, y: number, cancelled: boolean }>} Promise to give an object with the position and if the move has been cancelled or not
     */
    moveTo(x: number, y: number, speed?: number): Promise<{
        x: number;
        y: number;
        cancelled: boolean;
    }>;
    /**
     * This token can be used by third party services to authenticate a player and prove that the player is in a given room.
     * The token is generated by the administration panel linked to WorkAdventure.
     * The token is a string and is depending on your implementation of the administration panel.
     * In WorkAdventure SAAS version, the token is a JWT token that contains information such as the player's room ID and its associated membership ID.
     *
     * If you are using the self-hosted version of WorkAdventure and you developed your own administration panel, the token can be anything.
     * By default, self-hosted versions of WorkAdventure don't come with an administration panel, so the token string will be empty.
     * {@link https://workadventu.re/map-building/api-player.md#get-the-user-room-token-of-the-player | Website documentation}
     *
     * @returns {string|undefined} User room token
     */
    get userRoomToken(): string | undefined;
    /**
     * Display a thin line around your player's name (the "outline").
     * {@link https://workadventu.re/map-building/api-player.md#set-the-outline-color-of-the-player | Website documentation}
     *
     * @param {number} red
     * @param {number} green
     * @param {number} blue
     * @returns {Promise<void>} Promise to wait to known when the outiline has been displayed
     */
    setOutlineColor(red: number, green: number, blue: number): Promise<void>;
    /**
     * Remove the thin line around your player's name (the "outline").
     * {@link https://workadventu.re/map-building/api-player.md#set-the-outline-color-of-the-player | Website documentation}
     *
     * @returns {Promise<void>} Promise to await to known when the outline has been removed
     */
    removeOutlineColor(): Promise<void>;
    get proximityMeeting(): WorkadventureProximityMeetingCommands;
}
export declare type Position = {
    x: number;
    y: number;
};
declare const _default: WorkadventurePlayerCommands;
export default _default;
