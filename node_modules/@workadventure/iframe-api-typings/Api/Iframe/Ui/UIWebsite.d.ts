import { CreateUIWebsiteEvent, UIWebsiteMargin, UIWebsitePosition, UIWebsiteSize, UIWebsite as UIWebsiteCore } from "../../Events/Ui/UIWebsite";
import { IframeApiContribution } from "../IframeApiContribution";
export declare class UIWebsite {
    readonly id: string;
    private _url;
    private _visible;
    private readonly _allowPolicy;
    private readonly _allowApi;
    private _position;
    private _size;
    private _margin;
    constructor(config: UIWebsiteCore);
    get url(): string;
    set url(url: string);
    get visible(): boolean;
    set visible(visible: boolean);
    get allowPolicy(): string;
    get allowApi(): boolean;
    get position(): UIWebsitePosition;
    set position(position: UIWebsitePosition);
    get size(): UIWebsiteSize;
    set size(size: UIWebsiteSize);
    get margin(): UIWebsiteMargin;
    set margin(margin: UIWebsiteMargin);
    close(): Promise<void>;
}
export declare class UIWebsiteCommands extends IframeApiContribution<UIWebsiteCommands> {
    callbacks: never[];
    /**
     * Open an iFrame that is fixed in the viewport. Use this for advanced popups, additional buttons in the UI, HUD, etc... Returns a promise of a UIWebsite instance.
     * {@link https://workadventu.re/map-building/api-ui.md#display-a-ui-website | Website documentation}
     *
     * @param {CreateUIWebsiteEvent} createUIWebsite The details of the UIWebsite to create
     * @returns {Promise<UIWebsite>} Promise to return a UIWebsite
     */
    open(createUIWebsite: CreateUIWebsiteEvent): Promise<UIWebsite>;
    /**
     * Returns all UI websites (iframes positionned on the viewport)
     * {@link https://workadventu.re/map-building/api-ui.md#get-all-ui-websites | Website documentation}
     *
     * @returns {Promise<UIWebsite[]>} Promise to return all UI websites
     */
    getAll(): Promise<UIWebsite[]>;
}
declare const _default: UIWebsiteCommands;
export default _default;
